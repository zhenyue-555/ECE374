library ieee;
use ieee.std_logic_1164.all;

entity datapath2 is
port(

clr : IN STD_LOGIC; -- async. clear.
Clock : IN STD_LOGIC; -- clock.
HIin : IN STD_LOGIC;
LOin : IN STD_LOGIC;
PCin : IN STD_LOGIC;
IRin : IN STD_LOGIC;
Zin : IN STD_LOGIC;
Yin : IN STD_LOGIC;
MARin : IN STD_LOGIC;
MDRin : IN STD_LOGIC;
InPortin : IN STD_LOGIC;
Read : IN STD_LOGIC;
IncPC : IN STD_LOGIC;

HIout : IN STD_LOGIC;
LOout : IN STD_LOGIC;
Zhighout : IN STD_LOGIC;
Zlowout : IN STD_LOGIC;
PCout : IN STD_LOGIC;
MDRout : IN STD_LOGIC;
InPortout : IN STD_LOGIC;
Cout : IN STD_LOGIC;

ADD_i : IN STD_LOGIC;
SUB_i : IN STD_LOGIC;
MUL_i : IN STD_LOGIC;
DIV_i : IN STD_LOGIC;
SHR_i : IN STD_LOGIC;
SHL_i : IN STD_LOGIC;
ROR_i : IN STD_LOGIC;
ROL_i : IN STD_LOGIC;
AND_i : IN STD_LOGIC;
OR_i : IN STD_LOGIC;
NEG_i : IN STD_LOGIC;
NOT_i : IN STD_LOGIC;

BusMuxOut1 : OUT std_logic_vector(31 downto 0);

Write_i : IN STD_LOGIC;
OutPortin : IN STD_LOGIC;
Gra: IN STD_LOGIC;
Grb: IN STD_LOGIC;
Grc: IN STD_LOGIC;
Rin: IN STD_LOGIC;
Rout: IN STD_LOGIC;
BAout: IN STD_LOGIC;
CONin : in std_logic; --load/enable
CONFFout : out std_logic;
InputUnit : in std_logic_vector(31 downto 0);
OutputUnit : out std_logic_vector(31 downto 0)
);
end entity datapath2;

architecture behavior of datapath2 is

component register32 is
PORT(
BusMuxOut : IN STD_LOGIC_VECTOR(31 DOWNTO 0); -- input.
reg32_in : IN STD_LOGIC; -- load/enable.
clr : IN STD_LOGIC; -- async. clear.
clk : IN STD_LOGIC; -- clock.
BusMuxIn_reg32 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0) -- output.
);
end component register32;

component encoder is
 port( 
R0out,R1out,R2out,R3out,R4out,R5out,R6out,R7out,R8out,R9out,
R10out,R11out,R12out,R13out,R14out,R15out,HIout,LOout,Zhighout,Zlowout,
PCout,MDRout,InPortout,Cout: in std_logic;
o : out std_logic_vector(4 downto 0) 
 );  
end component encoder;

component busmux is
port(
BusMuxIn_R0,BusMuxIn_R1,BusMuxIn_R2,BusMuxIn_R3,BusMuxIn_R4,BusMuxIn_R5,
BusMuxIn_R6,BusMuxIn_R7,BusMuxIn_R8,BusMuxIn_R9,BusMuxIn_R10,BusMuxIn_R11,
BusMuxIn_R12,BusMuxIn_R13,BusMuxIn_R14,BusMuxIn_R15,BusMuxIn_HI,BusMuxIn_LO,
BusMuxIn_Zhigh,BusMuxIn_Zlow,BusMuxIn_PC,BusMuxIn_MDR,BusMuxIn_IN_PORT,
C_sign_extended: in std_logic_vector(31 downto 0);
Sin: in std_logic_vector(4 downto 0);
BusMuxOut: out std_logic_vector(31 downto 0)
);
end component busmux;


component ALU_encoder is
 port(
 		AND_i: IN STD_LOGIC;
		OR_i: IN STD_LOGIC;
		NOT_i: IN STD_LOGIC;
		NEG_i: IN STD_LOGIC;
		ADD_i: IN STD_LOGIC;
		SUB_i: IN STD_LOGIC;
		MUL_i: IN STD_LOGIC;
		DIV_i: IN STD_LOGIC;
		SHR_i: IN STD_LOGIC;
		SHL_i: IN STD_LOGIC;
		ROR_i: IN STD_LOGIC;
		ROL_i: IN STD_LOGIC;
		ALU_SEL: OUT STD_LOGIC_VECTOR(3 DOWNTO 0)
 );  
end component;

component ALU is
    Port (
	 	A,B : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		ALU_sel: IN STD_LOGIC_VECTOR(3 DOWNTO 0);
		C_HI: OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		C_LO: OUT STD_LOGIC_VECTOR(31 DOWNTO 0)
    );
end component ALU; 


component MDR is
PORT(	 
	 busMuxOut: IN std_logic_vector(31 downto 0);
    Mdatain:    IN std_logic_vector(31 downto 0);
    clr:        IN std_logic;
    clk:        IN std_logic;
    MDRin:      IN std_logic;
    Read_s:     IN std_logic;
    BusMuxIn_MDR: OUT std_logic_vector(31 downto 0)
);
END component MDR;


component MAR is
PORT(
MAR_in : IN STD_LOGIC_VECTOR(31 DOWNTO 0); -- input.
MAR_en : IN STD_LOGIC; -- load/enable.
clr : IN STD_LOGIC; -- async. clear.
clk : IN STD_LOGIC; -- clock.
MAR_out : OUT STD_LOGIC_VECTOR(31 DOWNTO 0) -- output.
);
end component MAR;


component HI is
 PORT
 (
  clk :  IN  STD_LOGIC;
  clr :  IN  STD_LOGIC;
  HI_in :  IN  STD_LOGIC;
  BusMuxOut :  IN  STD_LOGIC_VECTOR(31 DOWNTO 0);
  BusMuxIn_HI :  OUT  STD_LOGIC_VECTOR(31 DOWNTO 0)
 );
END component HI;


component LO is
 PORT
 (
  clk :  IN  STD_LOGIC;
  clr :  IN  STD_LOGIC;
  LO_in :  IN  STD_LOGIC;
  BusMuxOut :  IN  STD_LOGIC_VECTOR(31 DOWNTO 0);
  BusMuxIn_LO :  OUT  STD_LOGIC_VECTOR(31 DOWNTO 0)
 );
END component LO;


component Z is
 port(
  Z_in : IN STD_LOGIC; -- load/enable.
  clr : IN STD_LOGIC; -- async. clear.
  clk : IN STD_LOGIC; -- clock.
  Zin_hi : in std_logic_vector(31 downto 0); 
  Zin_low : in std_logic_vector(31 downto 0); 
  BusMuxin1 : out std_logic_vector(31 downto 0); --32bit output
  BusMuxin0 : out std_logic_vector(31 downto 0)  --32bit output
 );
end component Z;


component Y_reg is
PORT(
BusMuxOut : IN STD_LOGIC_VECTOR(31 DOWNTO 0); -- input.
Y_in : IN STD_LOGIC; -- load/enable.
clr : IN STD_LOGIC; -- async. clear.
clk : IN STD_LOGIC; -- clock.
Alu_in : OUT STD_LOGIC_VECTOR(31 DOWNTO 0) -- output.
);
end component Y_reg;


component PC is
PORT(
BusMuxOut : IN STD_LOGIC_VECTOR(31 DOWNTO 0); -- input.
PC_in : IN STD_LOGIC; -- load/enable.
IncPC : IN STD_LOGIC; 
clr : IN STD_LOGIC; -- async. clear.
clk : IN STD_LOGIC; -- clock.
BusMuxIn_PC : OUT STD_LOGIC_VECTOR(31 DOWNTO 0) -- output.

--		clk : IN STD_LOGIC;
--		clear : IN STD_LOGIC;
--		PCin : IN STD_LOGIC;
--		IncPC : IN STD_LOGIC;
--		BusMuxOut : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
--		BusMuxIn_PC : OUT STD_LOGIC_VECTOR(31 DOWNTO 0)
);
end component PC;


component IR is
PORT(
IR_in : IN STD_LOGIC_VECTOR(31 DOWNTO 0); -- input.
IR_en : IN STD_LOGIC; -- load/enable.
clr : IN STD_LOGIC; -- async. clear.
clk : IN STD_LOGIC; -- clock.
IR_out : OUT STD_LOGIC_VECTOR(31 DOWNTO 0) -- output.
);
end component IR;


component CONFF 
port(
   BusMuxOut : in std_logic_vector(31 downto 0);
   clr : in std_logic;
   clk : in std_logic;
   CONin : in std_logic; --load/enable
   IRout : in std_logic_vector(31 downto 0);
   CONFFout : out std_logic
);
end component CONFF;

component RAM32 IS
	PORT(
		r: IN STD_LOGIC;
		w: IN STD_LOGIC;
		data_in: IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		address: IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		data_out: OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		clk: IN STD_LOGIC;
		reset : IN STD_LOGIC
);
END component RAM32;

component selEncode IS
	PORT(
		Gra: IN STD_LOGIC;
		Grb: IN STD_LOGIC;
		Grc: IN STD_LOGIC;
		Rin: IN STD_LOGIC;
		Rout: IN STD_LOGIC;
		BAout: IN STD_LOGIC;
		R0in: OUT STD_LOGIC;
		R1in: OUT STD_LOGIC;
		R2in: OUT STD_LOGIC;
		R3in: OUT STD_LOGIC;
		R4in: OUT STD_LOGIC;
		R5in: OUT STD_LOGIC;
		R6in: OUT STD_LOGIC;
		R7in: OUT STD_LOGIC;
		R8in: OUT STD_LOGIC;
		R9in: OUT STD_LOGIC;
		R10in: OUT STD_LOGIC;
		R11in: OUT STD_LOGIC;
		R12in: OUT STD_LOGIC;
		R13in: OUT STD_LOGIC;
		R14in: OUT STD_LOGIC;
		R15in: OUT STD_LOGIC;
		R0out: OUT STD_LOGIC;
		R1out: OUT STD_LOGIC;
		R2out: OUT STD_LOGIC;
		R3out: OUT STD_LOGIC;
		R4out: OUT STD_LOGIC;
		R5out: OUT STD_LOGIC;
		R6out: OUT STD_LOGIC;
		R7out: OUT STD_LOGIC;
		R8out: OUT STD_LOGIC;
		R9out: OUT STD_LOGIC;
		R10out: OUT STD_LOGIC;
		R11out: OUT STD_LOGIC;
		R12out: OUT STD_LOGIC;
		R13out: OUT STD_LOGIC;
		R14out: OUT STD_LOGIC;
		R15out: OUT STD_LOGIC;
		C_sign_extended: OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		IRout: IN STD_LOGIC_VECTOR(31 DOWNTO 0)
	
	);
END component selEncode;


component R0 IS
	PORT(
		clk: IN STD_LOGIC;
		clr: IN STD_LOGIC;
		R0in: IN STD_LOGIC;
		BusMuxOut: IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		BAout: IN STD_LOGIC;
		BusMuxIn_R0: OUT STD_LOGIC_VECTOR(31 DOWNTO 0)
);
END component R0;

component InPort is
port(
InputUnit : in std_logic_vector(31 downto 0);
clr : in std_logic;
clk : in std_logic;
InPortin : in std_logic;
BusMuxIn_IN_PORT : out std_logic_vector(31 downto 0)
);
end component InPort;

component OutPort is
port(
clr : in std_logic;
clk : in std_logic;
OutPortin : in std_logic;
BusMuxOut : in std_logic_vector(31 downto 0);
OutputUnit : out std_logic_vector(31 downto 0)
);
end component OutPort;

signal BusMuxIn_R0,BusMuxIn_R1,BusMuxIn_R2,BusMuxIn_R3,BusMuxIn_R4,BusMuxIn_R5,
BusMuxIn_R6,BusMuxIn_R7,BusMuxIn_R8,BusMuxIn_R9,BusMuxIn_R10,BusMuxIn_R11,
BusMuxIn_R12,BusMuxIn_R13,BusMuxIn_R14,BusMuxIn_R15,BusMuxIn_HI,BusMuxIn_LO,
BusMuxIn_Zhigh,BusMuxIn_Zlow,BusMuxIn_PC,BusMuxIn_MDR,BusMuxIn_IN_PORT,C_sign_extended : std_logic_vector(31 downto 0);
signal Yout : std_logic_vector(31 downto 0);
signal BusMuxOut2 : STD_LOGIC_VECTOR(31 DOWNTO 0);
signal ALU_OUT : STD_LOGIC_VECTOR(63 downto 0);
signal ALU_Select : STD_LOGIC_VECTOR(3 downto 0);
signal BusmuxSin : STD_LOGIC_VECTOR(4 downto 0);
signal ALU_C_HI : STD_LOGIC_VECTOR(31 DOWNTO 0);
signal ALU_C_LO : STD_LOGIC_VECTOR(31 DOWNTO 0);

signal R0in : STD_LOGIC; 
signal R1in : STD_LOGIC;
signal R2in : STD_LOGIC;
signal R3in : STD_LOGIC;
signal R4in : STD_LOGIC;
signal R5in : STD_LOGIC;
signal R6in : STD_LOGIC;
signal R7in : STD_LOGIC;
signal R8in : STD_LOGIC;
signal R9in : STD_LOGIC;
signal R10in : STD_LOGIC;
signal R11in : STD_LOGIC;
signal R12in : STD_LOGIC;
signal R13in : STD_LOGIC;
signal R14in : STD_LOGIC;
signal R15in : STD_LOGIC;

signal R0out : STD_LOGIC; -- load/enable.
signal R1out : STD_LOGIC;
signal R2out : STD_LOGIC;
signal R3out : STD_LOGIC;
signal R4out : STD_LOGIC;
signal R5out : STD_LOGIC;
signal R6out : STD_LOGIC;
signal R7out : STD_LOGIC;
signal R8out : STD_LOGIC;
signal R9out : STD_LOGIC;
signal R10out : STD_LOGIC;
signal R11out : STD_LOGIC;
signal R12out : STD_LOGIC;
signal R13out : STD_LOGIC;
signal R14out : STD_LOGIC;
signal R15out : STD_LOGIC;

signal IRout, MARout : std_logic_vector(31 downto 0);
signal Mdatain : STD_LOGIC_VECTOR(31 DOWNTO 0);

begin

BusMuxOut1 <= BusMuxOut2;

selEncode1 : selEncode
	PORT MAP(
	
		Gra => Gra,
		Grb => Grb,
		Grc => Grc,
		Rin => Rin,
		Rout => Rout,
		BAout => BAout,
		R0in => R0in,
		R1in => R1in,
		R2in => R2in,
		R3in => R3in,
		R4in => R4in,
		R5in => R5in,
		R6in => R6in,
		R7in => R7in,
		R8in => R8in,
		R9in => R9in,
		R10in => R10in,
		R11in => R11in,
		R12in => R12in,
		R13in => R13in,
		R14in => R14in,
		R15in => R15in,
		R0out => R0out,
		R1out => R1out,
		R2out => R2out,
		R3out => R3out,
		R4out => R4out,
		R5out => R5out,
		R6out => R6out,
		R7out => R7out,
		R8out => R8out,
		R9out => R9out,
		R10out => R10out,
		R11out => R11out,
		R12out => R12out,
		R13out => R13out,
		R14out => R14out,
		R15out => R15out,
		C_sign_extended => C_sign_extended,
		IRout => IRout
		
		
		
);

regR0: R0
PORT MAP(
		clk => Clock,
		clr => clr,
		R0in => R0in,
		BusMuxOut => BusMuxOut2,
		BAout => BAout,
		BusMuxIn_R0 => BusMuxIn_R0
);

regR1: register32
PORT MAP(
BusMuxOut => BusMuxOut2,
reg32_in => R1in,
clr => clr,
clk => Clock,
BusMuxIn_reg32 => BusMuxIn_R1
);


regR2: register32
PORT MAP(
BusMuxOut => BusMuxOut2,
reg32_in => R2in,
clr => clr,
clk => Clock,
BusMuxIn_reg32 => BusMuxIn_R2
);


regR3: register32
PORT MAP(
BusMuxOut => BusMuxOut2,
reg32_in => R3in,
clr => clr,
clk => Clock,
BusMuxIn_reg32 => BusMuxIn_R3
);


regR4: register32
PORT MAP(
BusMuxOut => BusMuxOut2,
reg32_in => R4in,
clr => clr,
clk => Clock,
BusMuxIn_reg32 => BusMuxIn_R4
);


regR5: register32
PORT MAP(
BusMuxOut => BusMuxOut2,
reg32_in => R5in,
clr => clr,
clk => Clock,
BusMuxIn_reg32 => BusMuxIn_R5
);


regR6: register32
PORT MAP(
BusMuxOut => BusMuxOut2,
reg32_in => R6in,
clr => clr,
clk => Clock,
BusMuxIn_reg32 => BusMuxIn_R6
);


regR7: register32
PORT MAP(
BusMuxOut => BusMuxOut2,
reg32_in => R7in,
clr => clr,
clk => Clock,
BusMuxIn_reg32 => BusMuxIn_R7
);


regR8: register32
PORT MAP(
BusMuxOut => BusMuxOut2,
reg32_in => R8in,
clr => clr,
clk => Clock,
BusMuxIn_reg32 => BusMuxIn_R8
);


regR9: register32
PORT MAP(
BusMuxOut => BusMuxOut2,
reg32_in => R9in,
clr => clr,
clk => Clock,
BusMuxIn_reg32 => BusMuxIn_R9
);



regR10: register32
PORT MAP(
BusMuxOut => BusMuxOut2,
reg32_in => R10in,
clr => clr,
clk => Clock,
BusMuxIn_reg32 => BusMuxIn_R10
);


regR11: register32
PORT MAP(
BusMuxOut => BusMuxOut2,
reg32_in => R11in,
clr => clr,
clk => Clock,
BusMuxIn_reg32 => BusMuxIn_R11
);


regR12: register32
PORT MAP(
BusMuxOut => BusMuxOut2,
reg32_in => R12in,
clr => clr,
clk => Clock,
BusMuxIn_reg32 => BusMuxIn_R12
);


regR13: register32
PORT MAP(
BusMuxOut => BusMuxOut2,
reg32_in => R13in,
clr => clr,
clk => Clock,
BusMuxIn_reg32 => BusMuxIn_R13
);


regR14: register32
PORT MAP(
BusMuxOut => BusMuxOut2,
reg32_in => R14in,
clr => clr,
clk => Clock,
BusMuxIn_reg32 => BusMuxIn_R14
);


regR15: register32
PORT MAP(
BusMuxOut => BusMuxOut2,
reg32_in => R15in,
clr => clr,
clk => Clock,
BusMuxIn_reg32 => BusMuxIn_R15
);


regHI: HI  
 PORT MAP
 (
  clk => Clock,
  clr => clr,
  HI_in => HIin,
  BusMuxOut => BusMuxOut2,
  BusMuxIn_HI => BusMuxIn_HI
 );


regLOW: LO
 PORT MAP
 (
  clk => Clock,
  clr => clr,
  LO_in => LOin,
  BusMuxOut => BusMuxOut2,
  BusMuxIn_LO => BusMuxIn_LO
 );

regY: Y_reg
PORT MAP(
BusMuxOut => BusMuxOut2,
Y_in => Yin,
clr => clr,
clk => Clock,
Alu_in => Yout
);
 
ALU_ENCODER1 : ALU_encoder
 PORT MAP(
 		AND_i => AND_i,
		OR_i => OR_i,
		NOT_i => NOT_i,
		NEG_i => NEG_i,
		ADD_i => ADD_i,
		SUB_i => SUB_i,
		MUL_i => MUL_i,
		DIV_i => DIV_i,
		SHR_i => SHR_i,
		SHL_i => SHL_i,
		ROR_i => ROR_i,
		ROL_i => ROL_i,
		ALU_SEL => ALU_Select
 );  


ALURes: ALU
PORT MAP (
A => Yout,
B => BusMuxOut2,
ALU_sel => ALU_Select,
C_HI => ALU_C_HI,
C_LO => ALU_C_LO
);



regZ: Z
 PORT MAP(  
  Z_in => Zin,
  clr => clr,
  clk => Clock,
  Zin_hi => ALU_C_HI,
  Zin_low => ALU_C_LO,
  BusMuxin1 => BusMuxIn_Zhigh,
  BusMuxin0 => BusMuxIn_Zlow
 );


refMDR: MDR 
PORT MAP( 
	 busMuxOut => BusMuxOut2,
    Mdatain => Mdatain,
    clr => clr,
    clk => Clock,
    MDRin => MDRin,
    Read_s => Read,
    BusMuxIn_MDR => BusMuxIn_MDR
);

regPC: PC
PORT MAP(
BusMuxOut => BusMuxOut2,
PC_in => PCin,
IncPC => IncPC,
clr => clr,
clk => Clock,
BusMuxIn_PC => BusMuxIn_PC

--		clk => Clock,
--		clear => clr,
--		PCin => PCin,
--		IncPC => IncPC,
--		BusMuxOut => BusMuxOut2,
--		BusMuxIn_PC => BusMuxIn_PC
		
);


regIR : IR 
PORT MAP(
IR_in => BusMuxOut2,
IR_en => IRin,
clr => clr,
clk => Clock,
IR_out => IRout 
);


regMAR: MAR 
PORT MAP(
MAR_in => BusMuxOut2,
MAR_en => MARin,
clr => clr,
clk => Clock,
MAR_out => MARout 
);


Busmux_encoder: encoder
PORT MAP( 
R0out => R0out,
R1out => R1out,
R2out => R2out,
R3out => R3out,
R4out => R4out,
R5out => R5out,
R6out => R6out,
R7out => R7out,
R8out => R8out,
R9out => R9out,
R10out => R10out,
R11out => R11out,
R12out => R12out,
R13out => R13out,
R14out => R14out,
R15out => R15out,
HIout => HIout,
LOout => LOout,
Zhighout => Zhighout,
Zlowout => Zlowout,
PCout => PCout,
MDRout => MDRout,
InPortout => InPortout,
Cout => Cout,
o => BusmuxSin
 );  


BusMux1: busmux 
PORT MAP(
BusMuxIn_R0 => BusMuxIn_R0,
BusMuxIn_R1 => BusMuxIn_R1,
BusMuxIn_R2 => BusMuxIn_R2,
BusMuxIn_R3 => BusMuxIn_R3,
BusMuxIn_R4 => BusMuxIn_R4,
BusMuxIn_R5 => BusMuxIn_R5,
BusMuxIn_R6 => BusMuxIn_R6,
BusMuxIn_R7 => BusMuxIn_R7,
BusMuxIn_R8 => BusMuxIn_R8,
BusMuxIn_R9 => BusMuxIn_R9,
BusMuxIn_R10 => BusMuxIn_R10,
BusMuxIn_R11 => BusMuxIn_R11,
BusMuxIn_R12 => BusMuxIn_R12,
BusMuxIn_R13 => BusMuxIn_R13,
BusMuxIn_R14 => BusMuxIn_R14,
BusMuxIn_R15 => BusMuxIn_R15,
BusMuxIn_HI => BusMuxIn_HI,
BusMuxIn_LO => BusMuxIn_LO,
BusMuxIn_Zhigh => BusMuxIn_Zhigh,
BusMuxIn_Zlow => BusMuxIn_Zlow,
BusMuxIn_PC => BusMuxIn_PC,
BusMuxIn_MDR => BusMuxIn_MDR,
BusMuxIn_IN_PORT => BusMuxIn_IN_PORT,
C_sign_extended => C_sign_extended,
Sin => BusmuxSin,
BusMuxOut => BusMuxOut2
);


CONFF1: CONFF 
port map(
   BusMuxOut => BusMuxOut2,
   clr => clr,
   clk => Clock,
   CONin => CONin,
   IRout => IRout,
   CONFFout => CONFFout
);

RAM32_1 : RAM32
	PORT MAP(
		r => Read,
		w => Write_i,
		data_in => BusMuxIn_MDR,
		address => MARout,
		data_out => Mdatain,
		clk => Clock,
		reset => clr
);




regInPort1 : InPort 
port map(
InputUnit => InputUnit,
clr => clr,
clk => Clock,
InPortin => InPortin,
BusMuxIn_IN_PORT => BusMuxIn_IN_PORT
);


regOutPort1 : OutPort
port map(
clr => clr,
clk => Clock,
OutPortin => OutPortin,
BusMuxOut => BusMuxOut2,
OutputUnit => OutputUnit
);

 

end behavior;








